/* lex.h - flex-based lexical analyzer.
 * Copyright (C) 2022 epoll-reactor <glibcxx.chrono@gmail.com>
 *
 * This file is distributed under the MIT license.
 */

#ifndef FCC_FRONTEND_LEX_LEX_H
#define FCC_FRONTEND_LEX_LEX_H

#include "front_end/lex/tok.h"
#include "util/compiler.h"
#include "util/vector.h"

/** This function is called inside file, generated by flex on
    each processed token. May be used for example to collect
    all tokens into some array. */
void lex_consume_token(struct token *tok);

/** Array type. Needed to represent sequence of tokens,
    needed to be parsed.
   
    \note Parser requires random access memory layout of the buffer. */
typedef vector_t(struct token) tok_array_t;

/** Get the array of all processed before tokens.
   
    \note - Proper lex_init_global_state() and lex_cleanup_global_state()
            calls is user responsibility.
          - Should be called after yylex() call. */
wur tok_array_t *lex_consumed_tokens();

/** Allocate internal resources needed for representing tokens
    array to user. */
void lex_init_state();

/** Cleanup all internal resources. */
void lex_reset_state();

#endif // FCC_FRONTEND_LEX_LEX_H