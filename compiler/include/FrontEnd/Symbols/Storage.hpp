#ifndef WEAK_COMPILER_FRONTEND_SYMBOLS_STORAGE_HPP
#define WEAK_COMPILER_FRONTEND_SYMBOLS_STORAGE_HPP

#include "FrontEnd/Lex/Token.hpp"
#include <map>
#include <variant>

namespace weak {
namespace frontEnd {
class Storage {
public:
  using AnyDataType = std::variant<signed, float, char, bool, std::string>;

  Storage();

  struct StorageRecord {
    /// Scope depth, starts with 0.
    unsigned Depth;

    /// Identifier, generated by lexical analyzer, used to lookup and set
    /// operations.
    unsigned Attribute;

    /// The name of variable.
    std::string Name;

    /// Data type of stored variable, used for type checking.
    TokenType DataType;

    /// The stored value itself.
    AnyDataType StoredValue;
  };

  using RecordMap = std::map</*Attribute*/ unsigned, StorageRecord>;

  void ScopeBegin();
  void ScopeEnd();

  unsigned AddSymbol(std::string_view Name);

  StorageRecord *GetSymbol(unsigned Attribute);

  void SetSymbolType(unsigned Attribute, TokenType Type);

  void SetIntValue(unsigned Attribute, signed Value);
  void SetFloatValue(unsigned Attribute, float Value);
  void SetCharValue(unsigned Attribute, char Value);
  void SetBoolValue(unsigned Attribute, bool Value);
  void SetStringValue(unsigned Attribute, std::string Value);

  unsigned TotalVariables() { return Records.size(); }

private:
  unsigned CurrentScopeDepth;
  unsigned CurrentAttribute;
  RecordMap Records;
};

} // namespace frontEnd
} // namespace weak

#endif // WEAK_COMPILER_FRONTEND_SYMBOLS_STORAGE_HPP
