/* Storage.hpp - Variable pool.
 * Copyright (C) 2022 epoll-reactor <glibcxx.chrono@gmail.com>
 *
 * This file is distributed under the MIT license.
 */

#ifndef WEAK_COMPILER_MIDDLE_END_SYMBOLS_STORAGE_HPP
#define WEAK_COMPILER_MIDDLE_END_SYMBOLS_STORAGE_HPP

#include "FrontEnd/Lex/Token.hpp"
#include "MiddleEnd/IR/Instruction.hpp"
#include <map>
#include <variant>

namespace weak {
namespace middleEnd {

/*!
 * Storage for instructions and literals, used by IR only.
 *
 * Note that this class is designed to be friend with CodeGen to access
 * API for forwarding instructions into it.
 */
class Storage {
private:
  using AnyDataType = std::variant<signed, double, /*char,*/ bool,
                                   /*std::string,*/ Instruction,
                                   UnaryInstruction, InstructionReference>;

  struct Record {
    /// Scope depth, starts with 0.
    unsigned Depth;

    /// Identifier, generated by lexical analyzer, used to lookup and set
    /// operations.
    unsigned Attribute;

    /// This is used by IR generator.
    unsigned TemporaryLabel;

    /// The name of variable.
    std::string Name;

    /// Data type of stored variable, used for type checking.
    frontEnd::TokenType DataType;

    /// The stored value itself.
    AnyDataType StoredValue;
  };

  using RecordMap = std::map</*Attribute*/ unsigned, Record>;

public:
  Storage();

  /// Open new scope.
  void ScopeBegin();

  /// Terminate scope and destroy all variables, presented inside it.
  void ScopeEnd();

  /// Add record to table without specifying any information about type,
  /// value etc.
  unsigned AddSymbol(std::string_view Name);

  /// Specify variable type.
  void SetSymbolType(unsigned Attribute, frontEnd::TokenType Type);

  void setInstruction(unsigned Attribute, const Instruction &);
  void SetIntValue(unsigned Attribute, signed Value);
  void SetFloatValue(unsigned Attribute, float Value);
  void SetCharValue(unsigned Attribute, char Value);
  void SetBoolValue(unsigned Attribute, bool Value);
  void SetStringValue(unsigned Attribute, std::string Value);

  unsigned TotalVariables() { return Records.size(); }

private:
  friend class CodeGen;

  Record *GetSymbol(unsigned Attribute);
  Record *GetByName(std::string_view Name);

  std::pair<const unsigned, Record> &FindByAttribute(unsigned Attribute);
  void CheckIfVariableTypeIsSet(const Storage::Record &Record);
  void SetVariableImpl(frontEnd::TokenType Type, unsigned Attribute,
                       const AnyDataType &Value);

  unsigned CurrentScopeDepth;
  unsigned CurrentAttribute;
  RecordMap Records;
};

} // namespace middleEnd
} // namespace weak

#endif // WEAK_COMPILER_MIDDLE_END_SYMBOLS_STORAGE_HPP
